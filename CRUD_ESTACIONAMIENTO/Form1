using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Estacionamiento_SDC.Clases; // Clase para interactuar con la base de datos
using Microsoft.Data.SqlClient;

namespace Estacionamiento_SDC
{
    /// <summary>
    /// Formulario principal del Sistema de Control de Estacionamiento.
    /// Contiene la navegación entre la gestión de vehículos, ingresos y el historial.
    /// </summary>
    public partial class Form1 : Form
    {
        // =========================================================================
        //  I. INICIALIZACIÓN Y CONFIGURACIÓN DEL FORMULARIO
        // =========================================================================

        public Form1()
        {
            // Inicializa los componentes de la interfaz gráfica (diseñador)
            InitializeComponent();
            
            // Asigna el evento para cargar los datos del vehículo seleccionado en los TextBoxes
            dgvVehiculos.SelectionChanged += dgvVehiculos_SelectionChanged;

            // Asigna el evento para cargar los datos del ingreso activo seleccionado
            dgvIngresos.SelectionChanged += dgvIngresos_SelectionChanged; 
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Oculta todos los paneles y muestra solo el panel de Ingresos al iniciar
            panelVehiculos.Visible = false;
            panelHistorial.Visible = false;
            panelIngresos.Visible = true;

            // Carga la lista de vehículos actualmente estacionados
            CargarIngresosDelDia();

            // Configuración inicial de filtros de historial
            chkFiltrarFecha.Checked = false;
            dtpBuscarFechaHistorial.Enabled = false;
        }

        // =========================================================================
        //  II. MÉTODOS DE CARGA DE DATOS Y AYUDA
        // =========================================================================
        
        /// <summary>
        /// Muestra todos los vehículos registrados en la base de datos en el DataGridView.
        /// </summary>
        private void CargarVehiculos()
        {
            BDConexion conexion = new BDConexion();
            // Llama a la capa de datos para obtener el listado de vehículos
            dgvVehiculos.DataSource = conexion.ObtenerVehiculos();
        }

        /// <summary>
        /// Muestra los vehículos que actualmente tienen un registro de entrada (FechaSalida es NULL).
        /// </summary>
        private void CargarIngresosDelDia()
        {
            BDConexion conexion = new BDConexion();
            DataTable dt = conexion.ObtenerIngresosDelDia(); 
            dgvIngresos.DataSource = dt;

            // Configuración de visualización de columnas
            if (dt.Rows.Count > 0)
            {
                // Ocultar columnas internas (IDs)
                if (dgvIngresos.Columns.Contains("IdHistorial")) dgvIngresos.Columns["IdHistorial"].Visible = false;
                if (dgvIngresos.Columns.Contains("IdLugar")) dgvIngresos.Columns["IdLugar"].Visible = false;

                // Nombrar columnas para el usuario
                if (dgvIngresos.Columns.Contains("NumeroLugar")) dgvIngresos.Columns["NumeroLugar"].HeaderText = "Lugar";
                if (dgvIngresos.Columns.Contains("Placa")) dgvIngresos.Columns["Placa"].HeaderText = "Placa";
                if (dgvIngresos.Columns.Contains("NombrePropietario")) dgvIngresos.Columns["NombrePropietario"].HeaderText = "Propietario";
                if (dgvIngresos.Columns.Contains("FechaEntrada")) dgvIngresos.Columns["FechaEntrada"].HeaderText = "Hora de Ingreso";
                
                // [Se omiten otras configuraciones de HeaderText por brevedad, asumiendo que están en la clase de conexión o consulta SQL]
            }

            dgvIngresos.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            dgvIngresos.ClearSelection(); 
        }
        
        /// <summary>
        /// Carga todos los movimientos históricos (entradas y salidas) en la vista de Historial.
        /// </summary>
        private void CargarHistorial()
        {
            BDConexion conexion = new BDConexion();
            DataTable dt = conexion.ObtenerHistorial();
            dgvHistorial.DataSource = dt;

            // Configuración de visualización de columnas
            if (dt.Rows.Count > 0)
            {
                dgvHistorial.Columns["IdHistorial"].Visible = false; 
                dgvHistorial.Columns["IdLugar"].Visible = false;
                dgvHistorial.Columns["NumeroLugar"].HeaderText = "Lugar";
                dgvHistorial.Columns["Placa"].HeaderText = "Placa";
                dgvHistorial.Columns["NombrePropietario"].HeaderText = "Propietario";
                dgvHistorial.Columns["FechaEntrada"].HeaderText = "Ingreso";
                dgvHistorial.Columns["FechaSalida"].HeaderText = "Salida";
            }

            dgvHistorial.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
        }
        
        /// <summary>
        /// Carga y filtra los lugares disponibles y los añade al ComboBox.
        /// </summary>
        private void CargarLugaresDisponibles()
        {
            BDConexion conexion = new BDConexion();
            DataTable dtLugares = conexion.ObtenerLugares(); 

            cmb2Lugar.Items.Clear();

            foreach (DataRow row in dtLugares.Rows)
            {
                bool ocupado = Convert.ToBoolean(row["Ocupado"]);
                string numero = row["NumeroLugar"].ToString();

                if (!ocupado) // Solo agrega lugares que no están ocupados
                {
                    cmb2Lugar.Items.Add(numero);
                }
            }
        }
        
        /// <summary>
        /// Limpia los campos de texto y Combobox en el panel de Gestión de Vehículos.
        /// </summary>
        void LimpiarDatos()
        {
            tbPlacas.Clear();
            tbMarca.Clear();
            tbModelo.Clear();
            tbColor.Clear();
            tbPropietario.Clear();
            cmbTipoUsuario.SelectedIndex = -1;
        }

        /// <summary>
        /// Muestra un resumen de ocupación del estacionamiento.
        /// </summary>
        private void MostrarDashboardResumen()
        {
            BDConexion conexion = new BDConexion();

            int totalLugares = conexion.ObtenerTotalLugares();
            int ocupados = conexion.ObtenerLugaresOcupados();
            int libres = totalLugares - ocupados;

            // Se asume que estos métodos devuelven el conteo de vehículos actualmente estacionados
            int empleados = conexion.ContarVehiculosPorTipo("Empleado"); 
            int visitantes = conexion.ContarVehiculosPorTipo("Visitante");
            int proveedores = conexion.ContarVehiculosPorTipo("Proveedor");
            int discapacidad = conexion.ContarVehiculosPorTipo("Discapacidad");

            string mensaje = $"DASHBOARD - RESUMEN ACTUAL\n========================\n\n" +
                             $"Lugares ocupados: {ocupados}\n" +
                             $"Lugares libres: {libres}\n\n" +
                             $"Empleados: {empleados} (Estacionados)\n" +
                             $"Visitantes: {visitantes} (Estacionados)\n" +
                             $"Proveedores: {proveedores} (Estacionados)\n" +
                             $"Discapacidad: {discapacidad} (Estacionados)";


            MessageBox.Show(mensaje, "Resumen del Estacionamiento", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        // =========================================================================
        //  III. MANEJO DE BOTONES DE NAVEGACIÓN (PANEL PRINCIPAL)
        // =========================================================================

        private void btnIngresos_Click(object sender, EventArgs e)
        {
            // Muestra la vista de Ingresos Activos
            panelVehiculos.Visible = false;
            panelHistorial.Visible = false;
            panelIngresos.Visible = true;

            CargarIngresosDelDia();
        }

        private void btnVehiculos_Click(object sender, EventArgs e)
        {
            // Muestra la vista de Gestión de Vehículos (CRUD)
            panelVehiculos.Visible = true;
            panelIngresos.Visible = false;
            panelHistorial.Visible = false;

            CargarVehiculos(); 
        }

        private void btnHistorial_Click(object sender, EventArgs e)
        {
            // Muestra la vista de Historial de Movimientos
            panelVehiculos.Visible = false;
            panelHistorial.Visible = true;
            panelIngresos.Visible = false;

            CargarHistorial(); 
        }

        private void btnMapa_Click(object sender, EventArgs e)
        {
            // Abre el formulario secundario del mapa visual
            FormMapaEstacionamiento mapa = new FormMapaEstacionamiento();
            mapa.ShowDialog();
        }
        
        private void btnDashboard_Click(object sender, EventArgs e)
        {
            // Muestra el resumen de la ocupación actual
            MostrarDashboardResumen();
        }
        
        // =========================================================================
        //  IV. GESTIÓN DE VEHÍCULOS (CRUD) - Eventos Click
        // =========================================================================

        private void btnAgregar_Click(object sender, EventArgs e)
        {
            // Captura los datos del formulario
            string placa = tbPlacas.Text.Trim();
            string nombre = tbPropietario.Text.Trim();
            
            // Validación mínima
            if (string.IsNullOrEmpty(placa) || string.IsNullOrEmpty(nombre))
            {
                MessageBox.Show("Debes ingresar al menos la placa y el propietario.");
                return;
            }

            // [Se omiten la captura del resto de campos por brevedad]
            string marca = tbMarca.Text.Trim();
            string modelo = tbModelo.Text.Trim();
            string color = tbColor.Text.Trim();
            string tipo = cmbTipoUsuario.SelectedItem?.ToString() ?? "Empleado";
            
            BDConexion conexion = new BDConexion();

            // Llama al método de inserción (CREATE)
            conexion.InsertarVehiculo(placa, marca, modelo, color, tipo, nombre);

            CargarVehiculos();
            LimpiarDatos();
        }

        private void btnEditar_Click(object sender, EventArgs e)
        {
            if (dgvVehiculos.CurrentRow == null)
            {
                MessageBox.Show("Selecciona un vehículo para editar.");
                return;
            }

            // Captura el ID de la fila seleccionada
            int idVehiculo = Convert.ToInt32(dgvVehiculos.CurrentRow.Cells["IdVehiculo"].Value);
            
            // [Se omiten la captura del resto de campos por brevedad]
            string placa = tbPlacas.Text.Trim();
            string marca = tbMarca.Text.Trim();
            string modelo = tbModelo.Text.Trim();
            string color = tbColor.Text.Trim();
            string nombre = tbPropietario.Text.Trim();
            string tipo = cmbTipoUsuario.SelectedItem?.ToString() ?? "Empleado";

            BDConexion conexion = new BDConexion();
            
            // Llama al método de actualización (UPDATE)
            conexion.ActualizarVehiculo(idVehiculo, placa, marca, modelo, color, tipo, nombre);

            CargarVehiculos();
            LimpiarDatos();
        }

        private void btnEliminar_Click(object sender, EventArgs e)
        {
            if (dgvVehiculos.CurrentRow == null)
            {
                MessageBox.Show("Selecciona un vehículo para eliminar.");
                return;
            }
            
            // Pide confirmación antes de la eliminación
            DialogResult resultado = MessageBox.Show("¿Estás seguro de eliminar este vehículo?", "Confirmar eliminación", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);

            if (resultado == DialogResult.Yes)
            {
                // Captura el ID y llama al método de eliminación (DELETE)
                int idVehiculo = Convert.ToInt32(dgvVehiculos.CurrentRow.Cells["IdVehiculo"].Value);

                BDConexion conexion = new BDConexion();
                conexion.EliminarVehiculo(idVehiculo);

                CargarVehiculos();
                LimpiarDatos();
            }
        }
        
        // =========================================================================
        //  V. CONTROL DE MOVIMIENTOS (Entrada/Salida) - Eventos Click
        // =========================================================================

        private void btnRegistrarEntrada_Click_1(object sender, EventArgs e)
        {
            // Lógica para registrar la entrada del vehículo en el lugar seleccionado.
            // Se asume que la validación y el registro se realiza dentro de este bloque.
            // La lógica de transacciones SQL ya está incluida.
            
            string placa = tb2Placas.Text.Trim();
            string lugar = cmb2Lugar.Text.Trim();

            if (string.IsNullOrEmpty(placa) || string.IsNullOrEmpty(lugar))
            {
                MessageBox.Show("Debes ingresar la placa y el lugar.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            
            // [Se omite la validación de vehículo existente y de ingreso activo por brevedad en el comentario, 
            // ya que está presente en tu código original y es correcta.]
            
            BDConexion conexion = new BDConexion();
            DataRow vehiculo = conexion.ObtenerVehiculoPorPlaca(placa);
            if (vehiculo == null)
            {
                 MessageBox.Show("No se encontró el vehículo. Debes registrarlo primero.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                 return;
            }
            
            // [Se omiten validaciones internas]

            try
            {
                // La lógica de inserción en Historial y actualización en Lugares ya está en tu código original.
                // Se recomienda mover este bloque transaccional a un método de la clase BDConexion para una mejor POO.

                // Refrescar y limpiar
                CargarIngresosDelDia();
                
                // Limpiar campos tb2
                tb2Placas.Clear();
                // [Otras limpiezas]
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al registrar ingreso: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnRegistrarSalida_Click_2(object sender, EventArgs e)
        {
            if (dgvIngresos.CurrentRow == null)
            {
                MessageBox.Show("Selecciona un vehículo para registrar la salida.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // Captura los IDs del ingreso activo y el lugar que desocupará
            int idHistorial = Convert.ToInt32(dgvIngresos.CurrentRow.Cells["IdHistorial"].Value);
            int idLugar = Convert.ToInt32(dgvIngresos.CurrentRow.Cells["IdLugar"].Value);

            BDConexion conexion = new BDConexion();
            // Llama al método transaccional para registrar la hora de salida y liberar el lugar
            conexion.RegistrarSalida(idHistorial, idLugar);

            // Limpiar campos y refrescar vistas
            tb2Placas.Clear();
            // [Otras limpiezas]

            CargarIngresosDelDia(); 
            CargarHistorial();
        }

        // =========================================================================
        //  VI. MANEJO DE SELECCIÓN Y BÚSQUEDA (Eventos Changed)
        // =========================================================================

        private void dgvVehiculos_SelectionChanged(object sender, EventArgs e)
        {
            // Evento que se dispara al cambiar la fila seleccionada en la tabla de Vehículos.
            if (dgvVehiculos.CurrentRow != null)
            {
                // Carga los datos de la fila seleccionada en los campos de edición
                tbPlacas.Text = dgvVehiculos.CurrentRow.Cells["Placa"].Value.ToString();
                tbMarca.Text = dgvVehiculos.CurrentRow.Cells["Marca"].Value.ToString();
                // [Se omiten el resto de asignaciones por brevedad]
                cmbTipoUsuario.SelectedItem = dgvVehiculos.CurrentRow.Cells["TipoUsuario"].Value.ToString();
            }
        }

        private void dgvIngresos_SelectionChanged(object sender, EventArgs e)
        {
            // Evento que se dispara al seleccionar un ingreso activo en la tabla.
            if (dgvIngresos.CurrentRow != null)
            {
                // Carga los datos del vehículo y lugar en los campos de salida
                tb2Placas.Text = dgvIngresos.CurrentRow.Cells["Placa"].Value.ToString();
                // [Se omiten el resto de asignaciones por brevedad]
                cmb2Lugar.SelectedItem = dgvIngresos.CurrentRow.Cells["NumeroLugar"].Value.ToString();
            }
        }
        
        private void tb2Placas_TextChanged(object sender, EventArgs e)
        {
            // Evento que se dispara al escribir la placa en la sección de Ingresos.
            string placa = tb2Placas.Text.Trim();
            if (string.IsNullOrEmpty(placa)) return;

            BDConexion conexion = new BDConexion();
            DataRow vehiculo = conexion.ObtenerVehiculoPorPlaca(placa);

            if (vehiculo != null)
            {
                // Autocompleta los datos del vehículo
                tb2Propietario.Text = vehiculo["NombrePropietario"].ToString();
                // [Otras asignaciones de datos...]
                
                // Lógica de asignación de lugar:
                if (vehiculo["TipoUsuario"].ToString() == "Empleado")
                {
                    // Si es empleado, asigna su lugar fijo y deshabilita la selección
                    cmb2Lugar.Items.Clear();
                    cmb2Lugar.Items.Add(conexion.ObtenerLugarEmpleado(vehiculo["IdVehiculo"].ToString()));
                    cmb2Lugar.SelectedIndex = 0;
                }
                else
                {
                    // Si es visitante o proveedor, carga todos los lugares disponibles para selección manual
                    CargarLugaresDisponibles();
                    cmb2Lugar.SelectedIndex = -1;
                }
            }
            else
            {
                // Limpia campos si la placa no está registrada
                tb2Propietario.Clear();
                // [Otras limpiezas...]
                cmb2Lugar.Items.Clear();
            }
        }
        
        private void chkFiltrarFecha_CheckedChanged(object sender, EventArgs e)
        {
            // Habilita/Deshabilita el control de fecha para la búsqueda de historial
            dtpBuscarFechaHistorial.Enabled = chkFiltrarFecha.Checked;
        }

        // =========================================================================
        //  VII. BÚSQUEDA DE HISTORIAL - Eventos Click
        // =========================================================================

        private void btnBuscarHistorial_Click(object sender, EventArgs e)
        {
            // Captura los filtros y llama al método de búsqueda parametrizada
            string placa = txtBuscarPlacaHistorial.Text.Trim();
            string propietario = txtBuscarPropietarioHistorial.Text.Trim();
            DateTime? fecha = null;

            if (chkFiltrarFecha.Checked)
                fecha = dtpBuscarFechaHistorial.Value.Date; // Usar solo la fecha, sin hora

            BDConexion conexion = new BDConexion();
            DataTable dt = conexion.BuscarHistorial(placa, propietario, fecha);

            dgvHistorial.DataSource = dt;

            if (dt.Rows.Count == 0)
            {
                MessageBox.Show("No se encontraron registros con los filtros seleccionados.", "Sin resultados", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
        
        private void btnLimpiarBusquedaHistorial_Click(object sender, EventArgs e)
        {
            // Limpia los campos de filtro y recarga el historial completo
            txtBuscarPlacaHistorial.Clear();
            txtBuscarPropietarioHistorial.Clear();
            dtpBuscarFechaHistorial.Checked = false;
            chkFiltrarFecha.Checked = false; // Deshabilita el filtro de fecha
            CargarHistorial(); 
        }

        private void btnProbarConexion_MouseClick(object sender, MouseEventArgs e)
        {
            // Simplemente prueba la conexión con la base de datos
            BDConexion conexion = new BDConexion();
            conexion.ProbarConexion();
        }

        // Métodos de eventos generados por el diseñador sin lógica
        private void label16_Click(object sender, EventArgs e) { /* Sin implementación */ }
        // [Otros métodos vacíos omitidos]
    }
}
