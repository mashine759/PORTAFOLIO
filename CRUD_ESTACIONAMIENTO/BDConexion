using System;
using Microsoft.Data.SqlClient;
using System.Collections.Generic;
using System.Data;
using System.Windows.Forms; // Necesario para mostrar los mensajes de error

namespace Estacionamiento_SDC.Clases
{
    /// <summary>
    /// Gestiona todas las interacciones con la base de datos SQL Server.
    /// Utiliza consultas parametrizadas y el patrón 'using' para eficiencia y seguridad.
    /// </summary>
    internal class BDConexion
    {
        // =========================================================================
        // I. CONFIGURACIÓN Y CONEXIÓN
        // =========================================================================

        // Propiedad de solo lectura para la cadena de conexión (idealmente en archivo de configuración)
        private readonly string connectionString = @"Data Source=localhost;Initial Catalog=EstacionamientoDB;User ID=root3;Password=root3;TrustServerCertificate=True";

        public string ConnectionString
        {
            get { return connectionString; }
        }

        /// <summary>
        /// Intenta abrir y cerrar una conexión para verificar la configuración.
        /// </summary>
        public void ProbarConexion()
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    MessageBox.Show("¡Conexión exitosa!", "Éxito", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al conectar: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        // =========================================================================
        // II. GESTIÓN DE VEHÍCULOS (CRUD)
        // =========================================================================
        
        /// <summary>
        /// Inserta un nuevo vehículo en la base de datos.
        /// </summary>
        public void InsertarVehiculo(string placa, string marca, string modelo, string color, string tipoUsuario, string nombrePropietario)
        {
            try
            {
                // Validación duplicada a nivel de código para un feedback más rápido al usuario
                if (ObtenerVehiculoPorPlaca(placa) != null)
                {
                    MessageBox.Show($"La placa '{placa}' ya existe.", "Duplicado", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    string query = @"INSERT INTO Vehiculos (Placa, Marca, Modelo, Color, TipoUsuario, NombrePropietario)
                                     VALUES (@Placa, @Marca, @Modelo, @Color, @TipoUsuario, @NombrePropietario)";

                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.AddWithValue("@Placa", placa);
                        cmd.Parameters.AddWithValue("@Marca", marca);
                        cmd.Parameters.AddWithValue("@Modelo", modelo);
                        cmd.Parameters.AddWithValue("@Color", color);
                        cmd.Parameters.AddWithValue("@TipoUsuario", tipoUsuario);
                        cmd.Parameters.AddWithValue("@NombrePropietario", nombrePropietario);

                        cmd.ExecuteNonQuery();
                    }
                }
                MessageBox.Show("Vehículo agregado correctamente", "Éxito", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            // Captura específica si la FK o UNIQUE constraint falla
            catch (SqlException ex) when (ex.Number == 2627) 
            {
                 MessageBox.Show($"No se puede agregar el vehículo. La placa '{placa}' ya existe.", "Duplicado", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al insertar vehículo: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Actualiza los datos de un vehículo existente.
        /// </summary>
        public void ActualizarVehiculo(int idVehiculo, string placa, string marca, string modelo, string color, string tipoUsuario, string nombrePropietario)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    string query = @"UPDATE Vehiculos
                                     SET Placa = @Placa, Marca = @Marca, Modelo = @Modelo, Color = @Color,
                                         TipoUsuario = @TipoUsuario, NombrePropietario = @NombrePropietario
                                     WHERE IdVehiculo = @IdVehiculo";

                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.AddWithValue("@IdVehiculo", idVehiculo);
                        cmd.Parameters.AddWithValue("@Placa", placa);
                        cmd.Parameters.AddWithValue("@Marca", marca);
                        cmd.Parameters.AddWithValue("@Modelo", modelo);
                        cmd.Parameters.AddWithValue("@Color", color);
                        cmd.Parameters.AddWithValue("@TipoUsuario", tipoUsuario);
                        cmd.Parameters.AddWithValue("@NombrePropietario", nombrePropietario);

                        cmd.ExecuteNonQuery();
                    }
                }
                MessageBox.Show("Vehículo actualizado correctamente", "Éxito", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al actualizar vehículo: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Elimina un vehículo por su identificador.
        /// </summary>
        public void EliminarVehiculo(int idVehiculo)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    string query = "DELETE FROM Vehiculos WHERE IdVehiculo = @IdVehiculo";

                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.AddWithValue("@IdVehiculo", idVehiculo);
                        cmd.ExecuteNonQuery();
                    }
                }
                MessageBox.Show("Vehículo eliminado correctamente", "Éxito", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al eliminar vehículo: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Obtiene todos los vehículos de la base de datos.
        /// </summary>
        public DataTable ObtenerVehiculos()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    string query = "SELECT IdVehiculo, Placa, Marca, Modelo, Color, TipoUsuario, NombrePropietario FROM Vehiculos";
                    using (SqlDataAdapter adapter = new SqlDataAdapter(query, conn))
                    {
                        adapter.Fill(dt);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al obtener vehículos: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return dt;
        }

        /// <summary>
        /// Obtiene un vehículo por su placa. Retorna la primera fila o null.
        /// </summary>
        public DataRow ObtenerVehiculoPorPlaca(string placa)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    string query = @"SELECT IdVehiculo, Placa, Marca, Modelo, Color, TipoUsuario, NombrePropietario
                                     FROM Vehiculos WHERE Placa = @Placa";

                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.AddWithValue("@Placa", placa);
                        using (SqlDataAdapter da = new SqlDataAdapter(cmd))
                        {
                            da.Fill(dt);
                        }
                    }
                }
                return dt.Rows.Count > 0 ? dt.Rows[0] : null;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al buscar vehículo: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return null;
            }
        }

        // =========================================================================
        // III. GESTIÓN DE LUGARES
        // =========================================================================

        /// <summary>
        /// Obtiene todos los lugares de estacionamiento.
        /// </summary>
        public DataTable ObtenerLugares()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    string query = "SELECT IdLugar, NumeroLugar, TipoLugar, Ocupado, IdVehiculoAsignado, IdVehiculoOcupante FROM Lugares";
                    using (SqlDataAdapter adapter = new SqlDataAdapter(query, conn))
                    {
                        adapter.Fill(dt);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al obtener lugares: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return dt;
        }

        /// <summary>
        /// Obtiene el número de lugar asignado a un vehículo específico (empleado).
        /// </summary>
        public string ObtenerLugarEmpleado(string idVehiculo)
        {
            string lugar = "";
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    string query = @"SELECT NumeroLugar FROM Lugares WHERE IdVehiculoAsignado = @IdVehiculo";

                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.AddWithValue("@IdVehiculo", idVehiculo);
                        object result = cmd.ExecuteScalar();
                        if (result != null)
                            lugar = result.ToString();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al obtener lugar asignado: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return lugar;
        }

        /// <summary>
        /// Obtiene la información detallada de un lugar específico (para el mapa visual).
        /// </summary>
        public DataRow ObtenerInfoLugar(string numeroLugar)
        {
            // Se asume que este método debe estar dentro de un try-catch si es llamado desde el Form
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                string query = @"
                    SELECT L.NumeroLugar, L.Ocupado, V.Placa, V.NombrePropietario, V.TipoUsuario, H.FechaEntrada
                    FROM Lugares L
                    LEFT JOIN Vehiculos V ON L.IdVehiculoOcupante = V.IdVehiculo
                    LEFT JOIN Historial H 
                    ON H.IdVehiculo = V.IdVehiculo 
                    AND H.IdLugar = L.IdLugar 
                    AND H.FechaSalida IS NULL
                    WHERE L.NumeroLugar = @NumeroLugar";

                using (SqlCommand cmd = new SqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@NumeroLugar", numeroLugar);
                    using (SqlDataAdapter da = new SqlDataAdapter(cmd))
                    {
                        DataTable dt = new DataTable();
                        da.Fill(dt);
                        return dt.Rows.Count > 0 ? dt.Rows[0] : null;
                    }
                }
            }
        }


        // =========================================================================
        // IV. GESTIÓN DE HISTORIAL E INGRESOS ACTIVOS
        // =========================================================================

        /// <summary>
        /// Obtiene todos los vehículos que están actualmente estacionados (FechaSalida IS NULL).
        /// </summary>
        public DataTable ObtenerIngresosDelDia()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    string query = @"
                        SELECT H.IdHistorial, L.IdLugar, L.NumeroLugar, V.Placa, V.NombrePropietario, V.Marca, V.Modelo, V.Color, V.TipoUsuario, H.FechaEntrada
                        FROM Historial H
                        LEFT JOIN Vehiculos V ON H.IdVehiculo = V.IdVehiculo
                        LEFT JOIN Lugares L ON H.IdLugar = L.IdLugar
                        WHERE H.FechaSalida IS NULL
                        ORDER BY H.FechaEntrada DESC";

                    using (SqlDataAdapter adapter = new SqlDataAdapter(query, conn))
                    {
                        adapter.Fill(dt);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al obtener ingresos activos: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return dt;
        }
        
        /// <summary>
        /// Busca un ingreso activo (FechaSalida IS NULL) por placa.
        /// </summary>
        public DataRow ObtenerIngresoActivo(string placa)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    string query = @"
                        SELECT H.IdHistorial, H.FechaEntrada, L.NumeroLugar
                        FROM Historial H
                        INNER JOIN Vehiculos V ON H.IdVehiculo = V.IdVehiculo
                        LEFT JOIN Lugares L ON H.IdLugar = L.IdLugar
                        WHERE V.Placa = @Placa AND H.FechaSalida IS NULL";

                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.AddWithValue("@Placa", placa);
                        using (SqlDataAdapter da = new SqlDataAdapter(cmd))
                        {
                            da.Fill(dt);
                        }
                    }
                }
                return dt.Rows.Count > 0 ? dt.Rows[0] : null;
            }
            catch (Exception ex)
            {
                // Dejamos el mensaje aquí solo para propósitos de depuración.
                MessageBox.Show("Error al verificar ingreso activo: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return null;
            }
        }

        /// <summary>
        /// Obtiene todos los registros del historial (entradas y salidas).
        /// </summary>
        public DataTable ObtenerHistorial()
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    string query = @"
                        SELECT H.IdHistorial, L.IdLugar, L.NumeroLugar, V.Placa, V.NombrePropietario, H.FechaEntrada, H.FechaSalida
                        FROM Historial H
                        LEFT JOIN Vehiculos V ON H.IdVehiculo = V.IdVehiculo
                        LEFT JOIN Lugares L ON H.IdLugar = L.IdLugar
                        ORDER BY H.FechaEntrada DESC";

                    using (SqlDataAdapter adapter = new SqlDataAdapter(query, conn))
                    {
                        adapter.Fill(dt);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al obtener historial: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return dt;
        }

        /// <summary>
        /// Busca en el historial aplicando filtros dinámicos por placa, propietario y/o fecha.
        /// </summary>
        public DataTable BuscarHistorial(string placa, string propietario, DateTime? fecha)
        {
            DataTable dt = new DataTable();
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();

                    string query = @"
                        SELECT H.IdHistorial, L.IdLugar, L.NumeroLugar, V.Placa, V.NombrePropietario, H.FechaEntrada, H.FechaSalida
                        FROM Historial H
                        LEFT JOIN Vehiculos V ON H.IdVehiculo = V.IdVehiculo
                        LEFT JOIN Lugares L ON H.IdLugar = L.IdLugar
                        WHERE 1 = 1"; // Base para concatenar filtros

                    List<SqlParameter> parametros = new List<SqlParameter>();

                    // Filtro por Placa
                    if (!string.IsNullOrEmpty(placa))
                    {
                        query += " AND V.Placa LIKE @Placa";
                        parametros.Add(new SqlParameter("@Placa", "%" + placa + "%"));
                    }

                    // Filtro por Propietario
                    if (!string.IsNullOrEmpty(propietario))
                    {
                        query += " AND V.NombrePropietario LIKE @Propietario";
                        parametros.Add(new SqlParameter("@Propietario", "%" + propietario + "%"));
                    }

                    // Filtro por Fecha
                    if (fecha.HasValue)
                    {
                        query += " AND CAST(H.FechaEntrada AS DATE) = @Fecha";
                        parametros.Add(new SqlParameter("@Fecha", fecha.Value.Date));
                    }

                    query += " ORDER BY H.FechaEntrada DESC";

                    using (SqlCommand cmd = new SqlCommand(query, conn))
                    {
                        cmd.Parameters.AddRange(parametros.ToArray());
                        using (SqlDataAdapter da = new SqlDataAdapter(cmd))
                        {
                            da.Fill(dt);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al buscar en historial: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return dt;
        }
        
        /// <summary>
        /// Registra la salida del vehículo (actualiza FechaSalida y libera el lugar).
        /// </summary>
        public void RegistrarSalida(int idHistorial, int idLugar)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();

                    // 1. Actualizar FechaSalida en Historial
                    string queryHistorial = @"UPDATE Historial SET FechaSalida = @FechaSalida WHERE IdHistorial = @IdHistorial";
                    using (SqlCommand cmdHist = new SqlCommand(queryHistorial, conn))
                    {
                        cmdHist.Parameters.AddWithValue("@FechaSalida", DateTime.Now);
                        cmdHist.Parameters.AddWithValue("@IdHistorial", idHistorial);
                        cmdHist.ExecuteNonQuery();
                    }

                    // 2. Marcar el lugar como libre (Ocupado = 0) y quitar el ocupante (IdVehiculoOcupante = NULL)
                    string queryLugar = @"UPDATE Lugares
                                          SET Ocupado = 0, IdVehiculoOcupante = NULL
                                          WHERE IdLugar = @IdLugar";
                    using (SqlCommand cmdLugar = new SqlCommand(queryLugar, conn))
                    {
                        cmdLugar.Parameters.AddWithValue("@IdLugar", idLugar);
                        cmdLugar.ExecuteNonQuery();
                    }
                }

                MessageBox.Show("Salida registrada correctamente.", "Éxito", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error al registrar salida: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        

        // =========================================================================
        // V. MÉTODOS DE DASHBOARD (CONTEO)
        // =========================================================================

        /// <summary>
        /// Retorna el número total de lugares de estacionamiento.
        /// </summary>
        public int ObtenerTotalLugares()
        {
             // Implementación simplificada sin try/catch, asumiendo que la conexión fue probada.
             using (SqlConnection conn = new SqlConnection(connectionString))
             {
                 conn.Open();
                 string query = "SELECT COUNT(*) FROM Lugares";
                 SqlCommand cmd = new SqlCommand(query, conn);
                 return (int)cmd.ExecuteScalar();
             }
        }

        /// <summary>
        /// Retorna el número total de lugares actualmente ocupados.
        /// </summary>
        public int ObtenerLugaresOcupados()
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                string query = "SELECT COUNT(*) FROM Lugares WHERE Ocupado = 1";
                SqlCommand cmd = new SqlCommand(query, conn);
                return (int)cmd.ExecuteScalar();
            }
        }

        /// <summary>
        /// Cuenta cuántos vehículos de un tipo específico (Ej: 'Empleado') están actualmente estacionados.
        /// </summary>
        public int ContarVehiculosPorTipo(string tipo)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                string query = @"
                    SELECT COUNT(*) 
                    FROM Historial H
                    INNER JOIN Vehiculos V ON H.IdVehiculo = V.IdVehiculo
                    WHERE V.TipoUsuario = @tipo AND H.FechaSalida IS NULL";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@tipo", tipo);
                return (int)cmd.ExecuteScalar();
            }
        }
    }
}
